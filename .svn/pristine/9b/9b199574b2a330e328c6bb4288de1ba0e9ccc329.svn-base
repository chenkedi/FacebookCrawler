<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd" >
	
	
	 <!-- 负责内部属性的扫描 -->
	 <context:annotation-config></context:annotation-config>
	 <!-- Scans within the base package of the application for @Component classes to configure as beans -->
	 <!-- 控制@Controller、@Repository、@Component 的类外面的注解的扫描 -->
    <context:component-scan base-package="api.facebook" />
    <context:component-scan base-package="price" />
	
	<!--获取jdbc配置文件、params配置文件 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
		    <list>
			<value>classpath:jdbc.properties</value>
			<value>classpath:params.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 使用该方法可以直接将配置文件读入spring预置的类型为properties类中，在注入的类中使用@Value直接注入properties类或者使用spEL注入每一项的值 -->
	<bean id="paramsUtil" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:accessToken.properties</value>
				<value>classpath:params.properties</value>
			</list>
		</property>
	</bean>
	
	
	<!-- 使用Apache 旗下的DBCP连接池项目 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	    <property name="driverClassName" value="${jdbc.driverClassName}" />
	    <property name="url" value="${jdbc.url}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	    <!-- #最大连接数据库连接数,设 0 为没有限制 -->
		<property name="maxActive">
			<value>50</value>
		</property>
		<!-- #最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止。设 0 为没有限制  -->
		<property name="maxIdle">
			<value>20</value>
		</property>
		<!-- 最大等待毫秒数, 单位为 ms, 超过时间会出错误信息 -->
		<property name="maxWait">
			<value>1000</value>
		</property>
		<property name="defaultAutoCommit">
			<value>true</value>
		</property>
		<!-- 增加连接池清除超时连接的属性 -->
		<property name="testWhileIdle" value="true"></property>
		<property name="timeBetweenEvictionRunsMillis" value="300000"></property>
	</bean>
	
	<!-- 配置第二个数据源 -->
	<bean id="dataSourceLocal" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	    <property name="driverClassName" value="${jdbc.driverClassName}" />
	    <property name="url" value="${jdbc.url.local}" />
	    <property name="username" value="${jdbc.username.local}" />
	    <property name="password" value="${jdbc.password.local}" />
	    <!-- #最大连接数据库连接数,设 0 为没有限制 -->
		<property name="maxActive">
			<value>50</value>
		</property>
		<!-- #最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止。设 0 为没有限制  -->
		<property name="maxIdle">
			<value>20</value>
		</property>
		<!-- 最大等待毫秒数, 单位为 ms, 超过时间会出错误信息 -->
		<property name="maxWait">
			<value>1000</value>
		</property>
		<property name="defaultAutoCommit">
			<value>true</value>
		</property>
	</bean>
	
	<!-- 配置params bean -->
	<bean id="params" class="api.facebook.util.Params">
		<property name="useProxy" value="${params.useProxy}"></property>
		<property name="proxyIp" value="${params.proxyIp}"></property>
		<property name="proxyPort" value="${params.proxyPort}"></property>
		<property name="seedsInfoLength" value="${params.seedsInfoLength}"></property>
		<property name="postsInfoLength" value="${params.postsInfoLength}"></property>
		<property name="feedsInfoLength" value="${params.feedsInfoLength}"></property>
		<property name="commentsLength" value="${params.commentsLength}"></property>
	</bean>
	
	
	<!-- 这句话是干嘛的？ -->
	<context:property-placeholder location="jdbc.properties"/>
	
	
	<!-- 配置jdbctemplate，将dataSource使用构造器的方式注入其中。由于jdbcTemplate是线程安全的，所以可以只配置一个jdbcTemplate实例。
	这里使用 带命名空间的template -->
	<!-- <bean id="seedsDaoImpl" class="api.facebook.daoImpl.SeedsDaoImpl">
		<property name="dataSource" ref="dataSource"></property>
	</bean> -->
	
	 

</beans>